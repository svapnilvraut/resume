# Project template
- layout: top-middle
  name: Stock viewer App
  link: https://github.com/svapnilvraut/stock-viewer-app
  github: svapnilvraut/stock-viewer-app
  quote: >
    This is a demonstration of <mark>non-blocking microservice</mark> arcitecture
  description: | # this will include new lines to allow paragraphs
    This application is developed to demonstrate the non-blocking microservice architecture. 
    There is a <mark>API gateway</mark> microservice
    Which then redirects to <mark>Service-registry</mark> using Eureka-Server.
    Which then communicates with <mark>YahooFinanceAPI</mark> and <mark>stock-db-service</mark> 
    
- layout: top-middle
  name: Courses App UI
  link: https://github.com/svapnilvraut/Courses-App
  github: svapnilvraut/Courses-App
  quote: >
    This is a very basic course management app to Add, Update and Delete the course
  description: | # this will include new lines to allow paragraphs
    As a self learning and demonstrate the skill set, created an end-to-end courses management application. This is application makes use of React, Bootstrap, React routing and React Table.
    This application is written completely using JavaScript functional programming component in React using <mark>React Hooks</mark>.
    
    The application is created using <mark>create-react-app</mark>
    
    IDE used for the development is <mark>visual studio code.</mark>

- layout: top-middle
  name: Courses App service
  link: https://github.com/svapnilvraut/courses-app-service
  github: svapnilvraut/courses-app-service
  quote: >
    This is the service layer for the courses management app
  description: |
    To interact with the database and the UI, the service layer is written. This is a RESTFull service written using spring-boot
    
    The database used here is a No-Sql database named <mark>mongoDb</mark> and to integrate the service with the database made use of <mark>MongoRepository</mark>.
    
    IDE used for the development is <mark>IntelliJ</mark> and spring-boot application was created using <mark>Spring Initializr</mark>
    
- layout: top-middle
  name: Simple React and Redux app
  link: https://github.com/svapnilvraut/simple-react-redux
  github: svapnilvraut/simple-react-redux
  quote: >
    This is just a plain implementation and integration of React with Redux.
  description: |
    This project is created as a quick startup with React and Redux. This is a sample project that demonstrates the integration of Redux with React.
    Mainly the <mark>createStore</mark>, <mark>actionCreators</mark>, <mark>reducers</mark> & <mark>applyMiddleware</mark>

- layout: top-middle
  name: Reactive World
  link: https://github.com/svapnilvraut/reactive-world
  github: svapnilvraut/reactive-world
  quote: >
    This is created to practice and demonstrate the basic use of spring-webflux
  description: |
    This project is created as a basic implementation of spring-webflux.
    This project was created as a starting point to demonstrate the implementation of reactors <mark>mono</mark> and <mark>flux</mark> concepts. Using <mark>mongodb-reactive</mark> library at the back end to store the data and implement a <mark>non-blocking</mark> api calls.
    
- layout: top-middle
  name: Angular Courses App
  link: https://github.com/svapnilvraut/courses-app-angular
  github: svapnilvraut/courses-app-angular
  quote: >
    This is an courses app project in Angular.
  description: |
    Angular is a very powerful framework and very popular in developing the web applications.
    This project demonstrates the various aspects in angular. This project was created using the @angular/cli.
    This makes use of the RxJs obervable pattern to do the api calls using httpclient.
